"""add_webseeds

Revision ID: 6aeff935f1c3
Revises: efb45cd6cac9
Create Date: 2025-07-29 01:49:37.222468+00:00

"""

from datetime import UTC, datetime
from itertools import count
from typing import Sequence, TypedDict, Union

import sqlalchemy as sa
import sqlmodel.sql.sqltypes
from alembic import op
from torrent_models import Torrent

from sciop.config import get_config

# revision identifiers, used by Alembic.
revision: str = "6aeff935f1c3"
down_revision: Union[str, None] = "efb45cd6cac9"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


class WebseedRow(TypedDict):
    account_id: int
    torrent_file_id: int
    v1_infohash: str | None
    v2_infohash: str | None
    file_name: str
    created_at: datetime


def _move_webseeds(Webseeds: sa.Table) -> None:
    """
    slightly break migration isolation here because there's no reliable way from the DB
    alone to find the location of the torrent on disk.
    if this fails, tests will let us know
    """
    cfg = get_config()
    assert cfg.paths.torrents is not None, "No configured torrent path, can't upgrade webseeds"
    conn = op.get_bind()
    torrent_query = conn.execute(
        sa.text(
            "SELECT account_id, torrent_file_id, v1_infohash, v2_infohash, file_name, created_at "
            "FROM torrent_files"
        )
    )
    torrents_raw = torrent_query.fetchall()
    torrents = [
        WebseedRow(
            account_id=t[0],
            torrent_file_id=t[1],
            v1_infohash=t[2],
            v2_infohash=t[3],
            file_name=t[4],
            created_at=t[5],
        )
        for t in torrents_raw
    ]
    now = datetime.now(UTC)
    ws_id = count()
    new_webseeds = []
    for torrent in torrents:
        path_infohash = torrent["v2_infohash"] if torrent["v2_infohash"] else torrent["v1_infohash"]
        torrent_path = cfg.paths.torrents / path_infohash / torrent["file_name"]
        t = Torrent.read(torrent_path)
        if not t.url_list:
            continue
        for webseed in set(t.url_list):
            new_webseeds.append(
                {
                    "webseed_id": next(ws_id),
                    "account_id": torrent["account_id"],
                    "torrent_id": torrent["torrent_file_id"],
                    "url": webseed,
                    "status": "in_original",
                    "is_approved": True,
                    "is_removed": False,
                    "created_at": now,
                    "updated_at": now,
                }
            )
    op.bulk_insert(Webseeds, new_webseeds)


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    Webseeds = op.create_table(
        "webseeds",
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column("url", sqlmodel.sql.sqltypes.AutoString(length=512), nullable=False),
        sa.Column(
            "status",
            sa.Enum(
                "in_original",
                "pending_review",
                "queued",
                "in_progress",
                "validated",
                "error",
                name="webseedstatus",
            ),
            nullable=False,
        ),
        sa.Column("message", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("is_approved", sa.Boolean(), nullable=False),
        sa.Column("is_removed", sa.Boolean(), nullable=False),
        sa.Column("webseed_id", sa.Integer(), nullable=False),
        sa.Column("account_id", sa.Integer(), nullable=True),
        sa.Column("torrent_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["account_id"], ["accounts.account_id"], name=op.f("fk_webseeds_account_id_accounts")
        ),
        sa.ForeignKeyConstraint(
            ["torrent_id"],
            ["torrent_files.torrent_file_id"],
            name=op.f("fk_webseeds_torrent_id_torrent_files"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("webseed_id", name=op.f("pk_webseeds_webseed_id")),
        sa.UniqueConstraint("url", "torrent_id", name=op.f("uq_webseeds_url_torrent_id")),
    )

    with op.batch_alter_table("audit_log", schema=None) as batch_op:
        batch_op.add_column(sa.Column("target_webseed_id", sa.Integer(), nullable=True))
        batch_op.create_index(
            batch_op.f("ix_audit_log_target_webseed_id"), ["target_webseed_id"], unique=False
        )
        batch_op.create_foreign_key(
            batch_op.f("fk_audit_log_target_webseed_id_webseeds"),
            "webseeds",
            ["target_webseed_id"],
            ["webseed_id"],
            ondelete="SET NULL",
        )
    # ### end Alembic commands ###

    _move_webseeds(Webseeds)


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("webseeds")

    with op.batch_alter_table("audit_log", schema=None) as batch_op:
        batch_op.drop_constraint(
            batch_op.f("fk_audit_log_target_webseed_id_webseeds"), type_="foreignkey"
        )
        batch_op.drop_index(batch_op.f("ix_audit_log_target_webseed_id"))
        batch_op.drop_column("target_webseed_id")
    # ### end Alembic commands ###
