"""add-editing

Revision ID: 83e6a7fad77f
Revises: a95609631ed3
Create Date: 2025-03-22 08:36:50.943526+00:00

"""

from typing import Sequence, Union

import sqlalchemy as sa
import sqlmodel.sql.sqltypes
from alembic import op

# revision identifiers, used by Alembic.
revision: str = "83e6a7fad77f"
down_revision: Union[str, None] = "a95609631ed3"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "datasets__history",
        sa.Column("created_at", sa.DateTime(), autoincrement=False, nullable=True),
        sa.Column("updated_at", sa.DateTime(), autoincrement=False, nullable=True),
        sa.Column("is_approved", sa.Boolean(), autoincrement=False, nullable=False),
        sa.Column("is_removed", sa.Boolean(), autoincrement=False, nullable=False),
        sa.Column(
            "title",
            sqlmodel.sql.sqltypes.AutoString(length=512),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "publisher",
            sqlmodel.sql.sqltypes.AutoString(length=256),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "homepage", sqlmodel.sql.sqltypes.AutoString(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "description",
            sqlmodel.sql.sqltypes.AutoString(length=16384),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "description_html",
            sqlmodel.sql.sqltypes.AutoString(length=32768),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("dataset_created_at", sa.DateTime(), autoincrement=False, nullable=True),
        sa.Column("dataset_updated_at", sa.DateTime(), autoincrement=False, nullable=True),
        sa.Column(
            "source_type",
            sa.Enum("unknown", "web", "http", "ftp", "s3", name="sourcetype"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("source_available", sa.Boolean(), autoincrement=False, nullable=False),
        sa.Column("last_seen_at", sa.DateTime(), autoincrement=False, nullable=True),
        sa.Column(
            "source_access",
            sa.Enum(
                "unknown", "public", "registration", "paywalled", "proprietary", name="accesstype"
            ),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "scarcity",
            sa.Enum(
                "unknown",
                "source_only",
                "external_unconfirmed",
                "external_confirmed",
                "uploaded",
                name="scarcity",
            ),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "threat",
            sa.Enum(
                "unknown",
                "indefinite",
                "watchlist",
                "endangered",
                "takedown_issued",
                "extinct",
                name="threat",
            ),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "slug",
            sqlmodel.sql.sqltypes.AutoString(length=141),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("dataset_id", sa.Integer(), autoincrement=False, nullable=False),
        sa.Column("account_id", sa.Integer(), autoincrement=False, nullable=True),
        sa.Column(
            "scrape_status",
            sa.Enum("unknown", "not_started", "in_progress", "completed", name="scrapestatus"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "version_created_at",
            sa.DateTime(),
            server_default=sa.text("(datetime('now', 'utc', 'subsec'))"),
            nullable=False,
        ),
        sa.Column("version_comment", sa.Text(length=4096), nullable=True),
        sa.Column("version_created_by", sa.Integer(), nullable=True),
        sa.Column("version_is_deletion", sa.Boolean(), nullable=True),
        sa.ForeignKeyConstraint(
            ["account_id"], ["accounts.account_id"], name=op.f("fk_datasets_account_id_accounts")
        ),
        sa.ForeignKeyConstraint(
            ["dataset_id"],
            ["datasets.dataset_id"],
        ),
        sa.ForeignKeyConstraint(
            ["dataset_id"],
            ["datasets.dataset_id"],
            name=op.f("fk_datasets__history_dataset_id_datasets"),
        ),
        sa.ForeignKeyConstraint(
            ["version_created_by"],
            ["accounts.account_id"],
            name=op.f("fk_datasets__history_version_created_by_accounts"),
        ),
        sa.PrimaryKeyConstraint("version_created_at"),
        sqlite_autoincrement=True,
    )
    with op.batch_alter_table("datasets__history", schema=None) as batch_op:
        batch_op.create_index("ix_datasets__history_slug_history", ["slug"], unique=False)

    op.create_table(
        "dataset_parts__history",
        sa.Column("is_approved", sa.Boolean(), autoincrement=False, nullable=False),
        sa.Column("is_removed", sa.Boolean(), autoincrement=False, nullable=False),
        sa.Column("created_at", sa.DateTime(), autoincrement=False, nullable=True),
        sa.Column("updated_at", sa.DateTime(), autoincrement=False, nullable=True),
        sa.Column(
            "description",
            sqlmodel.sql.sqltypes.AutoString(length=4096),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "description_html",
            sqlmodel.sql.sqltypes.AutoString(length=8192),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "part_slug",
            sqlmodel.sql.sqltypes.AutoString(length=269),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("dataset_part_id", sa.Integer(), autoincrement=False, nullable=False),
        sa.Column("dataset_id", sa.Integer(), autoincrement=False, nullable=True),
        sa.Column("account_id", sa.Integer(), autoincrement=False, nullable=True),
        sa.Column(
            "version_created_at",
            sa.DateTime(),
            server_default=sa.text("(datetime('now', 'utc', 'subsec'))"),
            nullable=False,
        ),
        sa.Column("version_comment", sa.Text(length=4096), nullable=True),
        sa.Column("version_created_by", sa.Integer(), nullable=True),
        sa.Column("version_is_deletion", sa.Boolean(), nullable=True),
        sa.ForeignKeyConstraint(
            ["account_id"],
            ["accounts.account_id"],
            name=op.f("fk_dataset_parts_account_id_accounts"),
        ),
        sa.ForeignKeyConstraint(
            ["dataset_id"],
            ["datasets.dataset_id"],
            name=op.f("fk_dataset_parts_dataset_id_datasets"),
        ),
        sa.ForeignKeyConstraint(
            ["dataset_part_id"],
            ["dataset_parts.dataset_part_id"],
        ),
        sa.ForeignKeyConstraint(
            ["dataset_part_id"],
            ["dataset_parts.dataset_part_id"],
            name=op.f("fk_dataset_parts__history_dataset_part_id_dataset_parts"),
        ),
        sa.ForeignKeyConstraint(
            ["version_created_by"],
            ["accounts.account_id"],
            name=op.f("fk_dataset_parts__history_version_created_by_accounts"),
        ),
        sa.PrimaryKeyConstraint("version_created_at"),
    )
    with op.batch_alter_table("dataset_parts__history", schema=None) as batch_op:
        batch_op.create_index(
            "ix_dataset_parts__history_part_slug_history", ["part_slug"], unique=False
        )

    op.create_table(
        "dataset_tag_links__history",
        sa.Column("created_at", sa.DateTime(), autoincrement=False, nullable=True),
        sa.Column("updated_at", sa.DateTime(), autoincrement=False, nullable=True),
        sa.Column("dataset_id", sa.Integer(), autoincrement=False, nullable=False),
        sa.Column("tag_id", sa.Integer(), autoincrement=False, nullable=False),
        sa.Column(
            "version_created_at",
            sa.DateTime(),
            server_default=sa.text("(datetime('now', 'utc', 'subsec'))"),
            nullable=False,
        ),
        sa.Column("version_comment", sa.Text(length=4096), nullable=True),
        sa.Column("version_created_by", sa.Integer(), nullable=True),
        sa.Column("version_is_deletion", sa.Boolean(), nullable=True),
        sa.ForeignKeyConstraint(
            ["dataset_id"],
            ["dataset_tag_links.dataset_id"],
        ),
        sa.ForeignKeyConstraint(
            ["dataset_id"],
            ["dataset_tag_links.dataset_id"],
            name=op.f("fk_dataset_tag_links__history_dataset_id_dataset_tag_links"),
        ),
        sa.ForeignKeyConstraint(
            ["dataset_id"],
            ["datasets.dataset_id"],
            name=op.f("fk_dataset_tag_links_dataset_id_datasets"),
        ),
        sa.ForeignKeyConstraint(
            ["tag_id"],
            ["dataset_tag_links.tag_id"],
        ),
        sa.ForeignKeyConstraint(
            ["tag_id"],
            ["dataset_tag_links.tag_id"],
            name=op.f("fk_dataset_tag_links__history_tag_id_dataset_tag_links"),
        ),
        sa.ForeignKeyConstraint(
            ["tag_id"], ["tags.tag_id"], name=op.f("fk_dataset_tag_links_tag_id_tags")
        ),
        sa.ForeignKeyConstraint(
            ["version_created_by"],
            ["accounts.account_id"],
            name=op.f("fk_dataset_tag_links__history_version_created_by_accounts"),
        ),
        sa.PrimaryKeyConstraint("version_created_at"),
        sqlite_autoincrement=True,
    )
    op.create_table(
        "dataset_urls__history",
        sa.Column("dataset_url_id", sa.Integer(), autoincrement=False, nullable=False),
        sa.Column("dataset_id", sa.Integer(), autoincrement=False, nullable=True),
        sa.Column(
            "url", sqlmodel.sql.sqltypes.AutoString(length=512), autoincrement=False, nullable=False
        ),
        sa.Column(
            "version_created_at",
            sa.DateTime(),
            server_default=sa.text("(datetime('now', 'utc', 'subsec'))"),
            nullable=False,
        ),
        sa.Column("version_comment", sa.Text(length=4096), nullable=True),
        sa.Column("version_created_by", sa.Integer(), nullable=True),
        sa.Column("version_is_deletion", sa.Boolean(), nullable=True),
        sa.ForeignKeyConstraint(
            ["dataset_id"],
            ["datasets.dataset_id"],
            name=op.f("fk_dataset_urls_dataset_id_datasets"),
        ),
        sa.ForeignKeyConstraint(
            ["dataset_url_id"],
            ["dataset_urls.dataset_url_id"],
        ),
        sa.ForeignKeyConstraint(
            ["dataset_url_id"],
            ["dataset_urls.dataset_url_id"],
            name=op.f("fk_dataset_urls__history_dataset_url_id_dataset_urls"),
        ),
        sa.ForeignKeyConstraint(
            ["version_created_by"],
            ["accounts.account_id"],
            name=op.f("fk_dataset_urls__history_version_created_by_accounts"),
        ),
        sa.PrimaryKeyConstraint("version_created_at"),
        sqlite_autoincrement=True,
    )
    op.create_table(
        "external_identifiers__history",
        sa.Column("created_at", sa.DateTime(), autoincrement=False, nullable=True),
        sa.Column("updated_at", sa.DateTime(), autoincrement=False, nullable=True),
        sa.Column(
            "type",
            sa.Enum(
                "ark",
                "cid",
                "doi",
                "isni",
                "isbn",
                "issn",
                "purl",
                "qid",
                "rrid",
                "urn",
                "uri",
                "orcid",
                name="externalidentifiertype",
            ),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "identifier",
            sqlmodel.sql.sqltypes.AutoString(length=512),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("external_identifier_id", sa.Integer(), autoincrement=False, nullable=False),
        sa.Column("dataset_id", sa.Integer(), autoincrement=False, nullable=True),
        sa.Column(
            "version_created_at",
            sa.DateTime(),
            server_default=sa.text("(datetime('now', 'utc', 'subsec'))"),
            nullable=False,
        ),
        sa.Column("version_comment", sa.Text(length=4096), nullable=True),
        sa.Column("version_created_by", sa.Integer(), nullable=True),
        sa.Column("version_is_deletion", sa.Boolean(), nullable=True),
        sa.ForeignKeyConstraint(
            ["dataset_id"],
            ["datasets.dataset_id"],
            name=op.f("fk_external_identifiers_dataset_id_datasets"),
        ),
        sa.ForeignKeyConstraint(
            ["external_identifier_id"],
            ["external_identifiers.external_identifier_id"],
        ),
        sa.ForeignKeyConstraint(
            ["external_identifier_id"],
            ["external_identifiers.external_identifier_id"],
            name=op.f(
                "fk_external_identifiers__history_external_identifier_id_external_identifiers"
            ),
        ),
        sa.ForeignKeyConstraint(
            ["version_created_by"],
            ["accounts.account_id"],
            name=op.f("fk_external_identifiers__history_version_created_by_accounts"),
        ),
        sa.PrimaryKeyConstraint("version_created_at"),
        sqlite_autoincrement=True,
    )
    op.create_table(
        "external_sources__history",
        sa.Column("created_at", sa.DateTime(), autoincrement=False, nullable=True),
        sa.Column("updated_at", sa.DateTime(), autoincrement=False, nullable=True),
        sa.Column(
            "source",
            sqlmodel.sql.sqltypes.AutoString(length=256),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "url", sqlmodel.sql.sqltypes.AutoString(length=512), autoincrement=False, nullable=False
        ),
        sa.Column(
            "description",
            sqlmodel.sql.sqltypes.AutoString(length=4096),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("external_source_id", sa.Integer(), autoincrement=False, nullable=False),
        sa.Column("dataset_id", sa.Integer(), autoincrement=False, nullable=True),
        sa.Column("account_id", sa.Integer(), autoincrement=False, nullable=True),
        sa.Column(
            "version_created_at",
            sa.DateTime(),
            server_default=sa.text("(datetime('now', 'utc', 'subsec'))"),
            nullable=False,
        ),
        sa.Column("version_comment", sa.Text(length=4096), nullable=True),
        sa.Column("version_created_by", sa.Integer(), nullable=True),
        sa.Column("version_is_deletion", sa.Boolean(), nullable=True),
        sa.ForeignKeyConstraint(
            ["account_id"],
            ["accounts.account_id"],
            name=op.f("fk_external_sources_account_id_accounts"),
        ),
        sa.ForeignKeyConstraint(
            ["dataset_id"],
            ["datasets.dataset_id"],
            name=op.f("fk_external_sources_dataset_id_datasets"),
        ),
        sa.ForeignKeyConstraint(
            ["external_source_id"],
            ["external_sources.external_source_id"],
        ),
        sa.ForeignKeyConstraint(
            ["external_source_id"],
            ["external_sources.external_source_id"],
            name=op.f("fk_external_sources__history_external_source_id_external_sources"),
        ),
        sa.ForeignKeyConstraint(
            ["version_created_by"],
            ["accounts.account_id"],
            name=op.f("fk_external_sources__history_version_created_by_accounts"),
        ),
        sa.PrimaryKeyConstraint("version_created_at"),
        sqlite_autoincrement=True,
    )
    op.create_table(
        "uploads__history",
        sa.Column("created_at", sa.DateTime(), autoincrement=False, nullable=True),
        sa.Column("updated_at", sa.DateTime(), autoincrement=False, nullable=True),
        sa.Column("is_approved", sa.Boolean(), autoincrement=False, nullable=False),
        sa.Column("is_removed", sa.Boolean(), autoincrement=False, nullable=False),
        sa.Column(
            "method",
            sqlmodel.sql.sqltypes.AutoString(length=8192),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "method_html",
            sqlmodel.sql.sqltypes.AutoString(length=16384),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "description",
            sqlmodel.sql.sqltypes.AutoString(length=8192),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "description_html",
            sqlmodel.sql.sqltypes.AutoString(length=16384),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("upload_id", sa.Integer(), autoincrement=False, nullable=False),
        sa.Column("dataset_id", sa.Integer(), autoincrement=False, nullable=True),
        sa.Column("account_id", sa.Integer(), autoincrement=False, nullable=True),
        sa.Column(
            "version_created_at",
            sa.DateTime(),
            server_default=sa.text("(datetime('now', 'utc', 'subsec'))"),
            nullable=False,
        ),
        sa.Column("version_comment", sa.Text(length=4096), nullable=True),
        sa.Column("version_created_by", sa.Integer(), nullable=True),
        sa.Column("version_is_deletion", sa.Boolean(), nullable=True),
        sa.ForeignKeyConstraint(
            ["account_id"], ["accounts.account_id"], name=op.f("fk_uploads_account_id_accounts")
        ),
        sa.ForeignKeyConstraint(
            ["dataset_id"], ["datasets.dataset_id"], name=op.f("fk_uploads_dataset_id_datasets")
        ),
        sa.ForeignKeyConstraint(
            ["upload_id"],
            ["uploads.upload_id"],
        ),
        sa.ForeignKeyConstraint(
            ["upload_id"], ["uploads.upload_id"], name=op.f("fk_uploads__history_upload_id_uploads")
        ),
        sa.ForeignKeyConstraint(
            ["version_created_by"],
            ["accounts.account_id"],
            name=op.f("fk_uploads__history_version_created_by_accounts"),
        ),
        sa.PrimaryKeyConstraint("version_created_at"),
        sqlite_autoincrement=True,
    )
    op.create_table(
        "dataset_paths__history",
        sa.Column("created_at", sa.DateTime(), autoincrement=False, nullable=True),
        sa.Column("updated_at", sa.DateTime(), autoincrement=False, nullable=True),
        sa.Column("dataset_path_id", sa.Integer(), autoincrement=False, nullable=False),
        sa.Column("dataset_part_id", sa.Integer(), autoincrement=False, nullable=True),
        sa.Column(
            "path",
            sqlmodel.sql.sqltypes.AutoString(length=1024),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "version_created_at",
            sa.DateTime(),
            server_default=sa.text("(datetime('now', 'utc', 'subsec'))"),
            nullable=False,
        ),
        sa.Column("version_comment", sa.Text(length=4096), nullable=True),
        sa.Column("version_created_by", sa.Integer(), nullable=True),
        sa.Column("version_is_deletion", sa.Boolean(), nullable=True),
        sa.ForeignKeyConstraint(
            ["dataset_part_id"],
            ["dataset_parts.dataset_part_id"],
            name=op.f("fk_dataset_paths_dataset_part_id_dataset_parts"),
        ),
        sa.ForeignKeyConstraint(
            ["dataset_path_id"],
            ["dataset_paths.dataset_path_id"],
        ),
        sa.ForeignKeyConstraint(
            ["dataset_path_id"],
            ["dataset_paths.dataset_path_id"],
            name=op.f("fk_dataset_paths__history_dataset_path_id_dataset_paths"),
        ),
        sa.ForeignKeyConstraint(
            ["version_created_by"],
            ["accounts.account_id"],
            name=op.f("fk_dataset_paths__history_version_created_by_accounts"),
        ),
        sa.PrimaryKeyConstraint("version_created_at"),
        sqlite_autoincrement=True,
    )
    op.create_table(
        "torrent_files__history",
        sa.Column("created_at", sa.DateTime(), autoincrement=False, nullable=True),
        sa.Column("updated_at", sa.DateTime(), autoincrement=False, nullable=True),
        sa.Column(
            "file_name",
            sqlmodel.sql.sqltypes.AutoString(length=1024),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "v1_infohash",
            sqlmodel.sql.sqltypes.AutoString(length=40),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "v2_infohash",
            sqlmodel.sql.sqltypes.AutoString(length=64),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "version",
            sa.Enum("v1", "v2", "hybrid", name="torrentversion"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("total_size", sa.Integer(), autoincrement=False, nullable=False),
        sa.Column("piece_size", sa.Integer(), autoincrement=False, nullable=False),
        sa.Column("torrent_size", sa.Integer(), autoincrement=False, nullable=True),
        sa.Column("torrent_file_id", sa.Integer(), autoincrement=False, nullable=False),
        sa.Column("account_id", sa.Integer(), autoincrement=False, nullable=True),
        sa.Column("upload_id", sa.Integer(), autoincrement=False, nullable=True),
        sa.Column(
            "short_hash",
            sqlmodel.sql.sqltypes.AutoString(length=8),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "version_created_at",
            sa.DateTime(),
            server_default=sa.text("(datetime('now', 'utc', 'subsec'))"),
            nullable=False,
        ),
        sa.Column("version_comment", sa.Text(length=4096), nullable=True),
        sa.Column("version_created_by", sa.Integer(), nullable=True),
        sa.Column("version_is_deletion", sa.Boolean(), nullable=True),
        sa.ForeignKeyConstraint(
            ["account_id"],
            ["accounts.account_id"],
            name=op.f("fk_torrent_files_account_id_accounts"),
        ),
        sa.ForeignKeyConstraint(
            ["torrent_file_id"],
            ["torrent_files.torrent_file_id"],
        ),
        sa.ForeignKeyConstraint(
            ["torrent_file_id"],
            ["torrent_files.torrent_file_id"],
            name=op.f("fk_torrent_files__history_torrent_file_id_torrent_files"),
        ),
        sa.ForeignKeyConstraint(
            ["upload_id"], ["uploads.upload_id"], name=op.f("fk_torrent_files_upload_id_uploads")
        ),
        sa.ForeignKeyConstraint(
            ["version_created_by"],
            ["accounts.account_id"],
            name=op.f("fk_torrent_files__history_version_created_by_accounts"),
        ),
        sa.PrimaryKeyConstraint("version_created_at"),
        sqlite_autoincrement=True,
    )
    with op.batch_alter_table("torrent_files__history", schema=None) as batch_op:
        batch_op.create_index(
            "ix_torrent_files__history_short_hash_history", ["short_hash"], unique=False
        )
        batch_op.create_index(
            "ix_torrent_files__history_v1_infohash_history", ["v1_infohash"], unique=False
        )
        batch_op.create_index(
            "ix_torrent_files__history_v2_infohash_history", ["v2_infohash"], unique=False
        )

    op.create_table(
        "files_in_torrent__history",
        sa.Column("created_at", sa.DateTime(), autoincrement=False, nullable=True),
        sa.Column("updated_at", sa.DateTime(), autoincrement=False, nullable=True),
        sa.Column("file_in_torrent_id", sa.Integer(), autoincrement=False, nullable=False),
        sa.Column(
            "path",
            sqlmodel.sql.sqltypes.AutoString(length=1024),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("size", sa.Integer(), autoincrement=False, nullable=False),
        sa.Column("torrent_id", sa.Integer(), autoincrement=False, nullable=True),
        sa.Column(
            "version_created_at",
            sa.DateTime(),
            server_default=sa.text("(datetime('now', 'utc', 'subsec'))"),
            nullable=False,
        ),
        sa.Column("version_comment", sa.Text(length=4096), nullable=True),
        sa.Column("version_created_by", sa.Integer(), nullable=True),
        sa.Column("version_is_deletion", sa.Boolean(), nullable=True),
        sa.ForeignKeyConstraint(
            ["file_in_torrent_id"],
            ["files_in_torrent.file_in_torrent_id"],
        ),
        sa.ForeignKeyConstraint(
            ["file_in_torrent_id"],
            ["files_in_torrent.file_in_torrent_id"],
            name=op.f("fk_files_in_torrent__history_file_in_torrent_id_files_in_torrent"),
        ),
        sa.ForeignKeyConstraint(
            ["torrent_id"],
            ["torrent_files.torrent_file_id"],
            name=op.f("fk_files_in_torrent_torrent_id_torrent_files"),
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["version_created_by"],
            ["accounts.account_id"],
            name=op.f("fk_files_in_torrent__history_version_created_by_accounts"),
        ),
        sa.PrimaryKeyConstraint("version_created_at"),
        sqlite_autoincrement=True,
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("files_in_torrent__history")
    with op.batch_alter_table("torrent_files__history", schema=None) as batch_op:
        batch_op.drop_index("ix_torrent_files__history_v2_infohash_history")
        batch_op.drop_index("ix_torrent_files__history_v1_infohash_history")
        batch_op.drop_index("ix_torrent_files__history_short_hash_history")

    op.drop_table("torrent_files__history")
    op.drop_table("dataset_paths__history")
    op.drop_table("uploads__history")
    op.drop_table("external_sources__history")
    op.drop_table("external_identifiers__history")
    op.drop_table("dataset_urls__history")
    op.drop_table("dataset_tag_links__history")
    with op.batch_alter_table("dataset_parts__history", schema=None) as batch_op:
        batch_op.drop_index("ix_dataset_parts__history_part_slug_history")

    op.drop_table("dataset_parts__history")
    with op.batch_alter_table("datasets__history", schema=None) as batch_op:
        batch_op.drop_index("ix_datasets__history_slug_history")

    op.drop_table("datasets__history")
    # ### end Alembic commands ###
